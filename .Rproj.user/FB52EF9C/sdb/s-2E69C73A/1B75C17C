{
    "contents" : "\n################# LOAD PACKAGES AND DATA #######################################\n\n# Packages\nlibrary(psych)\nlibrary(psy)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(reshape)\nlibrary(GGally)\n\n### Import data ###\nStudy4 <- read.csv(\"PR_Study4.csv\")\n# str(Study4)\nsummary(Study4)\n\n\n################# CLEAN DATA ###################################################\n\n### Create new data set of Ps who\n# (1) have US IP address locations and \n# (2) passed the instructional manipulation check\n\n# Recode Country to indicate US vs non-US\nStudy4$US[Study4$Country == \"United States\"] <- \"US\"\nStudy4$US[Study4$Country != \"United States\"] <- \"Non-US\"\n# Double-check country coding\ntable(Study4$US,Study4$Country)\n\n# Code whether P passed instructional manipulation check (answered 10)\nStudy4$imc.pass[Study4$IMC == 10] <- \"Pass\"\nStudy4$imc.pass[Study4$IMC != 10] <- \"Fail\"\n# Double-check instructional manipulation check coding\ntable(Study4$imc.pass,Study4$IMC)\n\n# Get numbers of exclusions/inclusions\ntable(Study4$US, Study4$imc.pass)\n\n# Create data set containing only included participants\nincluded <- subset(Study4, imc.pass == \"Pass\" & US == \"US\")\n#str(included)\nsummary(included)\n\n\n\n### Create labels for categorical demographic variables\n# ethnicity/race\nincluded$ethnic2 <- factor(included$ethnic2,\n                           levels = c(1,2,3,4,5,6),\n                           labels = c(\"African American\",\n                                      \"Asian American\",\n                                      \"European American\",\n                                      \"Latino/Latina\",\n                                      \"Native American\",\n                                      \"Other\"))\n\n# gender\nincluded$gender <- factor(included$gender,\n                          levels = c(1,2),\n                          labels = c(\"Male\", \"Female\"))\n\n# income \nincluded[,\"income\"] <- factor(included[,\"income\"],\n                              levels = c(1,2,3,4,5,6,7,8),\n                              labels = c(\"Under $15,000\",\n                                         \"$15,001 - $25,000\",\n                                         \"$25,000 - $35,000\",\n                                         \"$35,001 - $50,000\",\n                                         \"$50,001 - $75,000\",\n                                         \"$75,001 - $100,000\",\n                                         \"$100,001 - $150,000\",\n                                         \"Over $150,000\"))\n\n# education \nincluded[,\"youred\"] <- factor(included[,\"youred\"],\n                              levels = c(1,2,3,4,5),\n                              labels = c(\"Less than high school\",\n                                         \"High school graduation or equivalent\",\n                                         \"Some college\", \"College graduation\",\n                                         \"Professional / Post-graduate degree\"))\n\n\n### Recode Likert items to 1-7 (were recorded as 19-25)\nfor(i in 19:25){ \n  included$SAS04InnerNew[included$SAS04Inner == i] <- i-18\n  included$SAS05RefleNew[included$SAS05Refle == i] <- i-18\n  included$SAS06ThougNew[included$SAS06Thoug == i] <- i-18\n  included$SR01ReflecNew[included$SR01Reflec == i] <- i-18\n  included$SR02WhoIAmNew[included$SR02WhoIAm == i] <- i-18\n  included$SR03AwareNew[included$SR03Aware == i] <- i-18\n  included$Mo01FeelinNew[included$Mo01Feelin == i] <- i-18\n  included$Mo02ThoughNew[included$Mo02Though == i] <- i-18\n  included$Mo03ExaminNew[included$Mo03Examin == i] <- i-18\n}\n# Test re-code on one item\ntable(included$SAS04InnerNew,included$SAS04Inner) \n\n\n\n### Create weighted effect-coded condition and method variables\n# condition\ntable(included[,\"Cond\"])\nincluded$condition[included$Cond == 0] <- -709 / 1450\nincluded$condition[included$Cond == 1] <- 741 / 1450\n# method\ntable(included[,\"Type\"])\nincluded$method[included$Type == 0] <- -683 / 1450\nincluded$method[included$Type == 1] <- 767 / 1450\n\n\n\n################# DESCRIPTIVES #################################################\n\n### Descriptive summaries of demographic variables\n\n# Gender\ntable(included[,\"gender\"])\n\n# Age\ndescribe(included[,\"age\"])\n\n# Race/ethnicity\nethnicitytable <- table(included[,\"ethnic2\"])\nprop.table(ethnicitytable)\n\n# Income\nincometable <- table(included[,\"income\"])\nprop.table(incometable)\n\n# Education\neducationtable <- table(included$youred)\nprop.table(educationtable)\n\n\n### Plot histograms of the dependent measures\n\n# Create a long version of the data set, where each item rating \n# for each participant is on a separate line\nvariable.names <- names(included)\ndvs <- melt(included, id = \"ResponseID\",\n            measure.vars = variable.names[c(105:113)])\n\n# Plot histograms for each distribution\nhistograms <- ggplot(dvs, aes(x=value)) + \n  geom_histogram(binwidth = 1) +\n  facet_wrap(~ variable) +\n  scale_x_continuous(limits = c(1, 7))\nhistograms\ndev.off()\n\n################# EXPLORATORY ANALYSES #########################################\n\n### Inter-item correlations\n\nggpairs(included[,105:113], lower = list(continuous = \"density\"))\ndev.off()\n\n### Compute Scale Scores & Cronbach's alphas\n\n# create lists of key values identifying which items will be included in which\n# scales\nkey.list <- list(self.reflect.all = c(1,2,3,4,5,6,7,8,9), \n                 private.sa       = c(1,2,3), \n                 need             = c(4,5,6),\n                 mogilner         = c(7,8,9))\n\n# link items names to key values\nkeys <- make.keys(9,key.list,\n                  item.labels=c(colnames(included)[105:107],\n                                colnames(included)[108:110],\n                                colnames(included)[111:113]))\nkeys\n\n# create scores\nscores <- scoreItems(keys,\n                     included[105:113],\n                     totals = FALSE,\n                     missing = TRUE,\n                     impute = \"median\")\nscores\n\nincluded$self.reflect.all <- scores$scores[,1]\nincluded$private.sa       <- scores$scores[,2]\nincluded$need.for.sr      <- scores$scores[,3]\nincluded$mogilner.sr      <- scores$scores[,4]\n\n\n### Create standardized scale scores\n\nincluded[,\"self.reflect.all.z\"] <- scale(included[,\"self.reflect.all\"],\n                                         center=TRUE, scale=TRUE)\nincluded[,\"private.sa.z\"]       <- scale(included[,\"private.sa\"],\n                                         center=TRUE, scale=TRUE)\nincluded[,\"mogilner.sr.z\"]      <- scale(included[,\"mogilner.sr\"],\n                                         center=TRUE, scale=TRUE)\nincluded[,\"need.for.sr.z\"]      <- scale(included[,\"need.for.sr\"],\n                                         center=TRUE, scale=TRUE)\n\n\n### Examine demographics by condition\nddply(included, .(condition, method), summarize,\n      men = length(ResponseID[gender == \"Male\"]) / length(ResponseID),\n      women = length(ResponseID[gender == \"Female\"]) / length(ResponseID),\n      mean.age = mean(age), \n      white = length(ResponseID[ethnic2 == \"European American\"]) / length(ResponseID))\n\n\n### Examine DV by demographics\ngenderplot <- ggplot(data = included, \n                     aes(y = self.reflect.all, x = gender)) +\n  geom_violin()\ngenderplot\n\nageplot <- ggplot(data = included, \n                  aes(y = self.reflect.all, x = age)) +\n  geom_point(position = position_jitter(width = .2), alpha = 0.2)\nageplot\n\ndev.off()\n\n################# CONFIRMATORY ANALYSIS ########################################\n\n### Regress standardized self-reflection onto \n### condition, method, and their interaction\nsr.model <- lm(self.reflect.all.z ~ condition*method - 1, data = included)\nsummary(sr.model)\n\n# Get 95% confidence intervals\nsr.model.cis <- confint(sr.model)\nsr.model.cis\n\n### Calculate means for plotting\n\nsr.means <- ddply(included, .(condition, method), summarize,\n                  mean = mean(self.reflect.all),\n                  ci.low = mean(self.reflect.all) - (1.96 * sd(self.reflect.all)/sqrt(length(self.reflect.all))),\n                  ci.hi = mean(self.reflect.all) + (1.96 * sd(self.reflect.all)/sqrt(length(self.reflect.all))))\n\n# convert conditions to factors\nsr.means[,\"condition\"] <- factor(sr.means[,\"condition\"],\n                                 labels = c(\"money\", \"time\"))\nsr.means[,\"method\"] <- factor(sr.means[,\"method\"],\n                              labels = c(\"implicit\", \"explicit\"))\n\nslopesplot <- ggplot(data=sr.means, \n\t  aes(y = mean, x = condition, group = method,\n        ymin = ci.low, ymax = ci.hi)) +\n    geom_errorbar(width = .1) +\n    geom_line(aes(linetype = method)) +\n    geom_point(size = 2) + \n    scale_x_discrete(\"Condition\") + \n    scale_y_continuous(\"Self-Reflection\",\n                       limits = c(3,7), breaks = c(3, 4, 5, 6, 7)) +\n    theme(legend.justification = c(1,0),\n          legend.position = c(1,0),\n          axis.text = element_text(colour = \"black\"),\n          panel.border = element_rect(fill = NA, colour = \"black\"),\n          panel.background = element_rect(fill = \"white\"))\nslopesplot\ndev.off()\nggsave(filename = \"time.pdf\", plot = slopesplot,\n       dpi = 300, width = 6, height = 10)\n\n",
    "created" : 1452614844515.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "152526339",
    "id" : "1B75C17C",
    "lastKnownWriteTime" : 1443117506,
    "path" : "~/Box Sync/Research/PR_Priming/threePrimes/PR_Study4_demo.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}